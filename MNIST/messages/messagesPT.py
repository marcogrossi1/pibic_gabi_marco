CREATING = "Criando o modelo...\n"
CREATED = "Modelo criado!\n"
LONG_TRAINING = "Iniciando o treinamento. Sente-se, isso pode levar um tempo! (tempo estimado: 15 - 60 minutos)\n"
SHORT_TRAINING = "Treinando... (tempo estimado: 45 - 90 segundos) \n"
DONE = "Concluído!\n"
TRAINING_SCORE = "Acurácia no conjunto de treino: "
TESTING_SCORE = "Acurácia no conjunto de teste: "
DIGITS_PLOT = "Aqui estão alguns exemplos de dígitos que a máquina previu!\n"
CLOSE_IMG = "Feche a imagem para continuar.\n"
CONFUSION_PLOT = "Aqui está a matriz de confusão!\n"
LINE = "---------------------------------------"
FINAL_RESULTS = "Esses são os resultados finais de todos os testes: "
INSTALLING_DEPENDENCIES = "Instalando as dependências necessárias! Esse processo pode levar alguns segundos.\n"
INITIALIZING = "Concluído! Iniciando a aplicação..."
GREETING = "Olá! Vamos resolver o problema do MNIST usando técnicas de ML!!!"
CHOOSE_METHOD = "Escolha o método: "
CHOOSE_PARAMETERS = "Você deseja testar os parâmetros?"
INVALID_VALUE = "Valor inválido. Reinicie a aplicação."
ENDING = "Finalizando a aplicação! Espero que você tenha se divertido!!! =)"
YES_PARAM_SEARCH = "Sim, quero encontrar os melhores parâmetros dentre os disponíveis (estimado entre 30 e 60 minutos)."
NO_PARAM_SEARCH = "Não, prefiro rodar com parâmetros malucos!!! (estimado entre 45 e 90 segundos)"
CHOOSE_ACTIVATION_FUNCTION = "Função de ativação ('identity', 'logistic', 'tanh', 'relu') -> relu:"
CHOOSE_SOLVER = "Resolvedor ('lbfgs', 'sgd', 'adam'): -> sgd"
CHOOSE_LAYERS = "Camada(s) oculta(s) (Insira os valores separados por espaços) -> 100 50:"

def ACTIVE_TESTING(j, solver, hiddenLayer, activation):
    return f"Teste {j} - Solver: {solver}, Camadas Ocultas: {hiddenLayer}, Ativação: {activation}\n"